# Crystal hw specs
# LIBMSP_XT1_FREQ ?= <no default>
# LIBMSP_XT1_CAP ?= <no default>
# LIBMSP_XT2_FREQ ?= <no default>

# Frequency of the internal oscillator (constant and MCU-specific)
LIBMSP_REFO_FREQ ?= 32768

# Main clock source: available options DCO,XT1,XT2
LIBMSP_CLOCK_SOURCE ?= DCO

# DCO settings: applicable when LIBMSP_CLOCK_SOURCE is DCO
LIBMSP_DCO_REF_SOURCE ?= REFO
LIBMSP_DCO_REF_CLOCK_DIV ?= 1
LIBMSP_DCO_FREQ ?= 8000000

# Clock dividers for main, secondary, and auxiliary clocks
LIBMSP_MCLK_DIV ?= 1
LIBMSP_SMCLK_DIV ?= 1
LIBMSP_ACLK_DIV ?= 1

# Core voltage level (PMMCOREV)
#   TODO: select default based on selected freq
LIBMSP_CORE_VOLTAGE_LEVEL ?= 0

# Workarounds for the MCU crashes due to voltage ramp on startup
# Value is a space-separated list of one or more of the following:
#  * disable-pmm : disable PMM module
#  * delay : a long delay after boot
#
# The problem these work around is crashes that occur at arbitrary times after
# startup. The crash is either a wild jump or an oscillator fault.
#
# At first glance crashes are somewhat consistent and seem correlated to
# peripheral activity. For example, not doing anything with the UART might seem
# to get rid of the crash, or, even stranger, re-arranging C-code, like
# removing code that's in an if-branch that is never taken, or replacing a
# function call with an inline invocation, all appear to consistently influence
# whether a crash happens or not.
#
# However, the underlying issue is traced to some kind of non-fail-stop failure
# during startup that corrupts subsequent execution. Furthermore, the problem
# has to do with the Power Management Module -- it either generates false
# events (like overvoltage), or does not generate correct events in time. In
# particular, there are multiple errata about it, including a false overvoltage
# even if voltage ramps up too quickly.
#
# This is might be related to erratum about PMM tripping incorrectly.
#
# NOTE: Unfortunately, these workarounds do not get rid of the same kind of
#  		crash that happens with debugger attached (either CCSv6 or mspdebug).
LIBMSP_STARTUP_VOLTAGE_WORKAROUNDS ?=

# Timer to use for the msp_sleep function (function not compiled if left blank)
LIBMSP_SLEEP_TIMER ?=
LIBMSP_SLEEP_TIMER_CLK ?= ACLK
LIBMSP_SLEEP_TIMER_DIV ?= 8*8

# Support timing of intervals greater than the maximum timer period
LIBMSP_SLEEP_TIMER_TICKS ?=

# Timer to use for keeping time in ticks (function not compiled if left blank)
LIBMSP_TICK_TIMER ?=
LIBMSP_TICK_TIMER_CLK ?= ACLK
LIBMSP_TICK_TIMER_DIV ?= 8*8

# The index of the UART module And its pins (e.g. '1.5')
LIBMSP_UART_IDX ?=
LIBMSP_UART_PIN_RX ?=
LIBMSP_UART_PIN_TX ?=

# Baudrate to configure the UART to
LIBMSP_UART_BAUDRATE ?= 115200

# Clock source for UART
LIBMSP_UART_CLOCK ?= SMCLK

# Whether to sleep while waiting for events, as opposed to busy-waiting/polling
LIBMSP_SLEEP ?= 1

# Settling time (ms) of voltage reference
# Default taken from MSP430FR59xx datasheet Table 5-32.
LIBMSP_REF_SETTLE_TIME ?= 0.080
#LIBMSP_REF_SETTLE_TIME ?= 0.250 # use this for delaying with msp_sleep in the code
